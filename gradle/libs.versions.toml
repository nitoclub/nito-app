[versions]
androidGradlePlugin = "8.2.2"
# For updating Kotlin and Compose Compiler version, see:
# https://github.com/JetBrains/compose-multiplatform/blob/master/VERSIONING.md#kotlin-compatibility
# https://developer.android.com/jetpack/androidx/releases/compose-kotlin?#pre-release_kotlin_compatibility
kotlin = "1.9.23"

androidDesugarJdkLibs = "2.0.4"
apollographql = "3.8.3"
compose = "1.6.1"
composeCompiler = "1.5.7"
androidxActivity = "1.8.2"
androidxSplashScreen = "1.0.1"
kotlinxCoroutines = "1.8.0"
koin = "3.5.3"
koinCompose = "1.1.2"
ktlint = "0.49.1"
kotlinxSerialization = "1.6.3"
ktor = "2.3.9"
ksp = "1.9.23-1.0.19"
firebaseBom = "32.8.0"
multiplatformFirebase = "1.11.1"
multiplatformSettings = "1.1.1"
kermit = "2.0.3"
okHttp = "4.12.0"
ossLicensesPlugin = "0.10.6"
ossLicenses = "17.0.1"
detekt = "1.23.6"
twitterComposeRule = "0.0.26"
kover = "0.7.6"
supabase = "2.3.0-coil3d1"
sqldelight = "2.0.1"
stately = "2.0.7"
logback = "1.5.3"
graphqlKotlin = "7.0.2"
kotest = "5.8.1"
precompose = "1.5.11"
imageLoader = "1.7.8"

[libraries]
androidGradlePlugin = { group = "com.android.tools.build", name = "gradle", version.ref = "androidGradlePlugin" }
kotlinGradlePlugin = { group = "org.jetbrains.kotlin", name = "kotlin-gradle-plugin", version.ref = "kotlin" }
composeGradlePlugin = { group = "org.jetbrains.compose", name = "compose-gradle-plugin", version.ref = "compose" }
kspGradlePlugin = { module = "com.google.devtools.ksp:com.google.devtools.ksp.gradle.plugin", version.ref = "ksp" }
firebaseGradlePlugin = { module = "com.google.gms:google-services", version = "4.4.1" }
kotlinxSerializationGradlePlugin = { module = "org.jetbrains.kotlin:kotlin-serialization", version.ref = "kotlin" }
completeKotlinPlugin = { module = "com.louiscad.complete-kotlin:plugin", version = "1.1.0" }
detektGradlePlugin = { group = "io.gitlab.arturbosch.detekt", name = "detekt-gradle-plugin", version.ref = "detekt" }
detektFormatting = { group = "io.gitlab.arturbosch.detekt", name = "detekt-formatting", version.ref = "detekt" }
twitterComposeRule = { module = "com.twitter.compose.rules:detekt", version.ref = "twitterComposeRule" }
ossLicensesPlugin = { group = "com.google.android.gms", name = "oss-licenses-plugin", version.ref = "ossLicensesPlugin" }
koverPlugin = { module = "org.jetbrains.kotlinx:kover-gradle-plugin", version.ref = "kover" }
kotestMultiplatformPlugin = { module = "io.kotest:kotest-framework-multiplatform-plugin-gradle", version.ref = "kotest" }

androidDesugarJdkLibs = { group = "com.android.tools", name = "desugar_jdk_libs", version.ref = "androidDesugarJdkLibs" }

koin = { module = "io.insert-koin:koin-core", version.ref = "koin" }
koinCompose = { module = "io.insert-koin:koin-compose", version.ref = "koinCompose" }

kotlinxCoroutinesCore = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinxCoroutines" }

kermit = { module = "co.touchlab:kermit", version.ref = "kermit" }
kermitKoin = { module = "co.touchlab:kermit-koin", version.ref = "kermit" }
kotlinxCollectionsImmutable = { module = "org.jetbrains.kotlinx:kotlinx-collections-immutable", version = "0.3.7" }
kotlinxDatetime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version = "0.5.0" }
kotlinxAtomicfu = { module = "org.jetbrains.kotlinx:atomicfu", version = "0.23.2" }

imageLoader = { module = "io.github.qdsfdhvh:image-loader", version.ref = "imageLoader" }

androidxActivityActivityCompose = { module = "androidx.activity:activity-compose", version.ref = "androidxActivity" }
androidxDatastoreDatastorePreferences = { module = "androidx.datastore:datastore-preferences-core", version = "1.1.0-beta02" }
androidxBrowser = { module = "androidx.browser:browser", version = "1.8.0" }
androidxWindow = { module = "androidx.window:window", version = "1.2.0" }
androidxSplashScreen = { module = "androidx.core:core-splashscreen", version.ref = "androidxSplashScreen" }
javaPoet = { module = "com.squareup:javapoet", version = "1.13.0" }

multiplatformSettingsNoArg = { module = "com.russhwolf:multiplatform-settings-no-arg", version.ref = "multiplatformSettings" }
multiplatformSettingsCoroutines = { module = "com.russhwolf:multiplatform-settings-coroutines", version.ref = "multiplatformSettings" }
kotlinSerializationJson = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinxSerialization" }

apolloRuntime = { module = "com.apollographql.apollo3:apollo-runtime", version.ref = "apollographql" }
apolloAdapters = { module = "com.apollographql.apollo3:apollo-adapters", version.ref = "apollographql" }

ktorClientCore = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktorClientOkHttp = { module = "io.ktor:ktor-client-okhttp", version.ref = "ktor" }
ktorClientDarwin = { module = "io.ktor:ktor-client-darwin", version.ref = "ktor" }
ktorKotlinxSerialization = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }
ktorClientContentNegotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }

ktorServerCore = { group = "io.ktor", name = "ktor-server-core", version.ref = "ktor" }
ktorServerWebsockets = { group = "io.ktor", name = "ktor-server-websockets", version.ref = "ktor" }
ktorServerCors = { group = "io.ktor", name = "ktor-server-cors", version.ref = "ktor" }
ktorServerCio = { group = "io.ktor", name = "ktor-server-cio", version.ref = "ktor" }
ktorServerNetty = { group = "io.ktor", name = "ktor-server-netty", version.ref = "ktor" }
ktorServerContentNegotiation = { group = "io.ktor", name = "ktor-server-content-negotiation", version.ref = "ktor" }
ktorServerTestHost = { group = "io.ktor", name = "ktor-server-test-host", version.ref = "ktor" }
logback = { module = "ch.qos.logback:logback-classic", version.ref = "logback" }
graphqlKotlinKtorServer = { module = "com.expediagroup:graphql-kotlin-ktor-server", version.ref = "graphqlKotlin" }

supabaseGotrue = { module = "io.github.jan-tennert.supabase:gotrue-kt", version.ref = "supabase" }
supabaseRealtime = { module = "io.github.jan-tennert.supabase:realtime-kt", version.ref = "supabase" }
supabasePostgrest = { module = "io.github.jan-tennert.supabase:postgrest-kt", version.ref = "supabase" }

sqldelightGradlePlugin = { module = "app.cash.sqldelight:gradle-plugin", version.ref = "sqldelight" }
sqldelightPrimitiveAdapters = { module = "app.cash.sqldelight:primitive-adapters", version.ref = "sqldelight" }
sqldelightCoroutinesExtensions = { module = "app.cash.sqldelight:coroutines-extensions", version.ref = "sqldelight" }
sqldelightAndroidDriver = { module = "app.cash.sqldelight:android-driver", version.ref = "sqldelight" }
sqldelightNativeDriver = { module = "app.cash.sqldelight:native-driver", version.ref = "sqldelight" }
sqldelightWebWorkerDriver = { module = "app.cash.sqldelight:web-worker-driver", version.ref = "sqldelight" }

statelyCommon = { module = "co.touchlab:stately-common", version.ref = "stately" }
statelyIsolate = { module = "co.touchlab:stately-isolate", version.ref = "stately" }
statelyIsoCollections = { module = "co.touchlab:stately-iso-collections", version.ref = "stately" }

okHttpCore = { module = "com.squareup.okhttp3:okhttp", version.ref = "okHttp" }
okHttpLoggingInterceptor = { module = "com.squareup.okhttp3:logging-interceptor", version.ref = "okHttp" }
okIo = { module = "com.squareup.okio:okio", version = "3.9.0" }
firebaseBom = { module = "com.google.firebase:firebase-bom", version.ref = "firebaseBom" }
firebaseCommon = { module = "com.google.firebase:firebase-common" }
firebaseDynamicLinks = { module = "com.google.firebase:firebase-dynamic-links" }
firebaseRemoteConfig = { module = "dev.gitlive:firebase-config", version.ref = "multiplatformFirebase" }
firebaseCrashlyticsGradlePlugin = { module = "com.google.firebase:firebase-crashlytics-gradle", version = "2.9.9" }
firebaseCrashlytics = { module = "com.google.firebase:firebase-crashlytics-ktx", version = "18.6.3" }

ossLicenses = { module = "com.google.android.gms:play-services-oss-licenses", version.ref = "ossLicenses" }

precompose = { module = "moe.tlaster:precompose", version.ref = "precompose" }
precomposeViewmodel = { module = "moe.tlaster:precompose-viewmodel", version.ref = "precompose" }
precomposeKoin = { module = "moe.tlaster:precompose-koin", version.ref = "precompose" }

kotestBom = { module = "io.kotest:kotest-bom", version.ref = "kotest" }
kotestAssertionsCore = { module = "io.kotest:kotest-assertions-core" }
kotestFrameworkEngine = { group = "io.kotest", name = "kotest-framework-engine" }
kotestFrameworkDatatest = { module = "io.kotest:kotest-framework-datatest" }
kotestRunnerJunit5 = { module = "io.kotest:kotest-runner-junit5" }

[plugins]
composeGradlePlugin = { id = "org.jetbrains.compose", version.ref = "compose" }
androidGradlePlugin = { id = "com.android.application", version.ref = "androidGradlePlugin" }
androidGradleLibraryPlugin = { id = "com.android.library", version.ref = "androidGradlePlugin" }
apollographql = { id = "com.apollographql.apollo3", version.ref = "apollographql" }
kotlinGradlePlugin = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
kspGradlePlugin = { id = "com.google.devtools.ksp", version.ref = "ksp" }
kotlinxKover = { id = "org.jetbrains.kotlinx.kover", version.ref = "kover" }
detektGradlePlugin = { id = "io.gitlab.arturbosch.detekt", version.ref = "detekt" }
ossLicensesPlugin = { id = "com.google.android.gms.oss-licenses-plugin", version.ref = "ossLicensesPlugin" }

[bundles]
plugins = [
    "androidGradlePlugin",
    "kotlinGradlePlugin",
    "composeGradlePlugin",
    "kspGradlePlugin",
    "firebaseGradlePlugin",
    "kotlinxSerializationGradlePlugin",
    "completeKotlinPlugin",
    "detektGradlePlugin",
    "ossLicensesPlugin",
    "sqldelightGradlePlugin",
    "koverPlugin",
    "firebaseCrashlyticsGradlePlugin",
    "kotestMultiplatformPlugin",
]
